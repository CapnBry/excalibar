# map2ps scaled
# MastaMappa Copyleft 2004
# I release this software to the public domain software
# converts an Excalibur .map file to postscript (no labels)


if [ "$1" = "" ]
then
	echo "usage: $0 [-p] Excalibur_vector_map_file.map [> file.ps]"
	echo "	-p is for maps you intent to send to a printer"
	exit
fi

p=0
if [ "$1" = -p ]
then
	p=1
	shift
fi

minmax $1 | read minx maxx miny maxy rangex rangey junk

# minx  maxx  miny  maxy  rangex rangey
# 17321 28874 20705 32531 11553  11826 
# 22000 25000 22000 30000 3000   8000
# 

nawk '
function max(x,y)
{
if (x >= y)
	return x
else
	return y
}
BEGIN {
	minx = '$minx'
	miny = '$miny'
	rx = '$rangex'
	ry = '$rangey'
	p='$p'
	# R = 65535 # fullscale
	R = int(max(rx,ry)*1.06)
	if (R > 65535)
		{
		R = 65535
		offx = 0
		offy = 65535
		offym = 0
		}
	else
		{
		offx = minx + int(rx/2) - int(R / 2)
		offy = miny + int(ry/2) + int(R / 2)
		offym = miny + int(ry/2) - int(R / 2)
		}
	print "18 108 translate"
	print "/Helvetica findfont 15 scalefont setfont"
	print "/mfscale  { 8 72 mul 65536 div mul } def"
	print "/mscale  { 8 72 mul " R " div mul } def"
	FS = ","
	print "0 setgray"
	print "0 0 moveto"
	print "0 65535 mfscale lineto"
	print "65535 mfscale 65535 mfscale lineto"
	print "65535 mfscale 0 lineto"
	print "0 0 lineto"
	if (p == 1)
		print "stroke"
	else
		print "fill"
	if (R < 3000)
		step = 100
	else if (R < 25000)
		step = 1000
	else
		step = 10000
	#                   R G B
	rgb["blue"]     = " 0 0 1 "
	rgb["green"]    = " 0 1 0 "
	rgb["red"]      = " 1 0 0 "
	rgb["cyan"]     = " 0 1 1 "
	rgb["magenta"]  = " 1 0 1 "
	rgb["yellow"]   = " 1 1 0 "
	rgb["brown"]    = " .9 .5 0 "
	rgb["Brown"]    = " .9 .5 0 "
	if (p == 1)
	{
		rgb["white"]    = " 0 0 0 "
	}
	else
	{
		rgb["white"]    = " 1 1 1 "
	}
	rgb["pink"]     = " 1 .75 .75 "
	rgb["orange"]   = " 1 .75 .15 "
	rgb["darkgreen"]   = " 0 .332 0 "
	rgb["DarkGreen"]   = " 0 .332 0 "
	rgb["DarkGrey"]   = " .3 .3 .3 "
	rgb["Gold"]      = " 1 0.664062 0.0664062 "
	rgb["Gray"]    =   " .5 .5 .5 "
	rgb["gray"]    =   " .5 .5 .5 "
	rgb["grey"]    =   " .5 .5 .5 "

	}
NR == 1 {
	if (p == 1)
		print "0 setgray"
	else
		print "1 setgray"
	print "500 mfscale 3000 mfscale moveto (" $1 ") show"
	mod = "2005"
	if (FILENAME != "-")
	{
		cmd = "ls -l " FILENAME " 2>/dev/null"
		cmd | getline x
		close(cmd)
		split(x,a, " ")
		mod = sprintf("%s %02d %d", a[6] , a[7], (a[8] ~ ":" ? "2005" : a[8]))
	}
	print "500 mfscale 500 mfscale moveto (MastaMappa " mod ") show"
	print "0 setgray"
	print "500 mfscale -2500 mfscale moveto (offset = \(" offx "," offym "\)   width = " R "   gridsize = " step ") show"
	#print "% ", offx, offy, 65536-offy
	print -offx, "mscale", -(65536-offy), "mscale translate"
	print ".5 setgray"
	for (i = step; i < 65535; i += step)
		{
		if (i >= offym && i <= offy)
			{
			print offx " mscale " 65536 - i " mscale moveto"
			print offx+R " mscale " 65536 - i " mscale lineto"
			print "stroke"
			}
		if (i >= offx && i <= offx+R)
			{
			print i " mscale " 65536 - offym " mscale moveto"
			print i " mscale " 65536 - offy " mscale  lineto"
			print "stroke"
			}
		}
	}
$1 ~ /M|F/ {
	print $5, "mscale", 65536 - $6, "mscale moveto"
	for (i = 8; i < NF; i +=3)
		print $i, "mscale", 65536 - $(i+1), "mscale lineto"
	if ($3 in rgb)
		print rgb[$3] "setrgbcolor"
	else
		print rgb["white"] "setrgbcolor"
	print "stroke"
	}
END { print "showpage" }' $*

